1. 数据结构分为逻辑结构和物理结构
   逻辑结构分为线性结构,集合,树和图
   物理结构分为顺序存储结构和链式存储结构
2. 线性表是线性结构的一种,顺序存储的线性表称为顺序表,链式存储的称为链表
   线性表是一组具有相同特性的元素的组成的有限序列,特点包括:序列,有限,无序,首部元素没有前驱元素,结尾元素没有后继元素,除此之外的其它元素
   都只有一个前驱和一个后继元素
   栈和队列都是线性表,只不过操作受限,栈只允许在同一端(头部)进行插入和删除操作,队列只允许在一端(尾部)插入数据,另一端删除数据(头部)
3. 图的存储包括邻接矩阵和邻接表
   邻接矩阵:一个一维数组存储顶点信息,一个二维数据(邻接矩阵)存储顶点之间的邻接关系
   邻接表:每个顶点建立一个链表,链表的头结点存储顶点信息,其它节点储存与顶点相连的边的信息,建立一个头结点结构的一维数组,头结点指向边信息
4. 二叉查找(搜索)树(Binary Search Tree, BST),又称二叉排序树,定义:它是一颗空树,或者是具有如下性质的二叉树:
   a> 节点左子树不为空,则左子树的值小于根节点的值;
   b> 节点右子树不为空,则右子树的值大于根节点的值;
   c> 节点的左右子树也都是二叉查找树
   d> 没有键值相等的节点
   显然,中序遍历二叉查找树,可以得到从小到大排序的输出(排序树),利用左子树值比根节点小,右子树值比根节点大的特性,又可以实现快速的查找功能(查找树,O(logN))
   二叉查找树的缺点是,但当插入的数据有序时,BST会退化为链表,此时查找的平均时间复杂度为O(N),查找效率会大大降低,因此若想获得最佳的查找性能,我们需要
   保证二叉查找树是平衡的,就这引出了带平衡条件的二叉查找树,二叉平衡树(Balanced Binary Tree)
5. 二叉平衡树(Balanced Binary Tree),又称AVL(Adelson-Velskii and Landis)树,得名于发明者G.M.Adelson-Velsky和E.M.Landis
   平衡二叉树很好的解决了二叉查找树退化成链表的问题,把插入,查找和删除的时间复杂度最好情况和最坏情况都保持在O(logN)
   定义:它是一棵空树,或者它的左右两个子树的高度差的绝对值不超过1,并且左右两棵子树都是一棵平衡二叉树
   平衡二叉树与普通二叉查找树的最大不同在于插入,删除的时候可能会改变树的平衡,并且从插入/删除的节点到根节点的路径上的所有节点的平衡性都有可能改变
   常见的四种不平衡情况:左左插入,左旋操作(画个图很容易推导);右右插入,右旋操作;左右插入,先t->left节点的右旋操作,再t节点的左旋操作
   右左插入,先t->right的左旋操作,再t节点的右旋操作
   AVL是严格平衡的BST,所以它的查找时间复杂度是O(logN),且由于它避免了BST的退化,所以最差查找复杂度也是O(logN)
   由于要保持严格平衡,所以AVL的每一次插入都有可能要进行1次(最多1次)旋转(单旋或双旋),因此它的插入操作还是O(logN)
   同样的删除操作时,也需要旋转操作保持平衡,不过需要坚持从删除节点开始到根节点路径上所有节点的平衡因子,所以删除操作的代价较大,每次删除操作,最多
   需要O(logN)次旋转,所以删除操作的时间复杂度(查找+旋转)是:O(logN)+O(logN) = O(2logN)
   AVL是以牺牲建立严格平衡的BST为代价(插入和删除时的旋转操作),来保证O(logN)的查找时间复杂度,那么有没有一种折中方案,以较小的代价建立一种查找结构,
   同时还能保证高效的查找效率,这便引出了红黑树(Red-Black Tree)
6. 红黑树(Red-Black Tree),一种自平衡的二叉查找树,由Rudolf Bayer于1972年发明,在当时被称为对称二叉B树(symmetric binary B-trees)
   后来,在1978年被Leo J.Guibas和Robert Sedgewick修改为如今的红黑树,红黑树具有良好的效率,它能在O(logN)的时间内完成插入,删除和查找
   红黑树并不追求严格的平衡,它只要求部分达到平衡,降低了对旋转的要求,从而提高整体的性能
   参考:https://segmentfault.com/a/1190000012728513
